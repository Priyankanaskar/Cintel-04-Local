[{"name": "app.py", "content": "# import libraries----------------------------------------------------------------------------------------------------------------------------------\nimport plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nimport shinyswatch\n\n\n# Theme------------------------------------------------------------------------------------------------------------------------------------------------------------\nshinyswatch. theme.darkly()\n\n# This package provides the Palmer Penguins dataset----------------------------------------------------------------------------------------------\n\nfrom shiny import reactive, render, req\nimport seaborn as sns\nimport pandas as pd\nimport palmerpenguins\n\n# Use the built-in function to load the Palmer Penguins dataset-----------------------------------------------------------------------------------------------\nimport seaborn as sns\npenguins = sns.load_dataset(\"penguins\")\npenguins_df = load_penguins()\n\n\n\n# Use the built-in function to load the Palmer Penguins dataset-----------------------------------------------------------------------------------------------------------\npenguins_df = palmerpenguins.load_penguins()\npenguins_df_r = penguins_df.rename(columns={\"bill_depth_mm\": \"Bill Depth (mm)\", \"bill_length_mm\": \"Bill Length (mm)\", \n\"flipper_length_mm\": \"Flipper Length (mm)\", \"body_mass_g\": \"Body Mass (g)\", \"species\": \"Species\", \"island\": \"Island\", \"sex\": \"Sex\", \"year\": \"Year\"})\n\n# Name the page ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nui.page_opts(title=\"Priyanka's Penguin Dashboard\", fillable=False)\n\n#Shiny UI sidebar for user interaction------------------------------------------------------------------------------------------------------------------------------------------------\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n\n# Create a dropdown input to choose a column -----------------------------------------------------------------------------------------------------------------------------------------------\n    \n    ui.input_selectize(\"selected_attribute\", \"Body Measurement\", choices=[\"Bill Length (mm)\", \"Bill Depth (mm)\", \"Flipper Length (mm)\", \"Body Mass (g)\"]) \n    \n# Create a numeric input for the number of Plotly histogram bins----------------------------------------------------------------------------------------------------------------------------------\n    \n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 30)\n    \n# Create a slider input for the number of Seaborn bins---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 100, 20)\n    \n# Create a checkbox group input to filter the species-------------------------------------------------------------------------------------------------------------------------------------------------\n    ui.input_checkbox_group(\"selected_species_list\", \"Selected Species of Penguins\", \n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=\"Adelie\", inline=False)\n    \n # Use ui.input_checkbox_group() to create a checkbox group input to filter the islands--------------------------------------------------------------------\n    ui.input_checkbox_group(\n        \"selected_islands\",\n        \"Islands in Graphs\",\n        [\"Torgersen\", \"Biscoe\", \"Dream\"],\n        selected=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n        inline=False,\n    )\n    \n# Add a horizontal rule to the sidebar----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    ui.hr()\n    \n# Add a hyperlink to the sidebar------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    \n    ui.a(\"GitHub\", href=\"https://github.com/Priyankanaskar/cintel-03-reactive\", target=\"_blank\")\n\n        \n# create a layout to include 2 cards with a data table and data grid------------------------------------------------------------------------------------------------------------------------------\nwith ui.accordion(id=\"acc\", open=\"closed\"):\n    with ui.accordion_panel(\"Data Table\"):\n        @render.data_frame\n        def penguin_datatable():\n            return render.DataTable( filtered_data())\n\n    with ui.accordion_panel(\"Data Grid\"):\n        @render.data_frame\n        def penguin_datagrid():\n            return render.DataGrid( filtered_data())\n            \n# Plot Charts----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nui.input_select(\"x\", \"Variable:\",\n                choices=[\"bill_length_mm\", \"bill_depth_mm\"])\nui.input_select(\"dist\", \"Distribution:\", choices=[\"hist\", \"kde\"])\nui.input_checkbox(\"rug\", \"Show rug marks\", value = False)\n\n\n## Column--------------------------------------------------------------------------------------------------------------------------------------------\n\n\n@render.plot\ndef displot():\n    sns.displot(\n        data=penguins, hue=\"species\", multiple=\"stack\",\n        x=input.x(), rug=input.rug(), kind=input.dist())\n\n\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n#Create Scatter plot\nwith ui.card(full_screen=True):\n\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        # Create a Plotly scatterplot using Plotly Express\n        return px.scatter(filtered_data(), x=\"Flipper Length (mm)\", y=\"Bill Length (mm)\", color=\"Species\", \n                          facet_row=\"Species\", facet_col=\"Sex\", title=\"Penguin Scatterplot\")\n\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# Pie Chart plot\nwith ui.card(full_screen=True):\n\n    ui.card_header(\"Plotly Pie Chart: Body Mass\")\n\n    @render_plotly\n    def plotly_pie():\n        pie_chart = px.pie(filtered_data(), values=\"Body Mass (g)\", names=\"Island\", title=\"Body mass on Islands\")\n        return pie_chart\n\n    @render_plotly\n    def plotly_pie_s():\n        pie_chart = px.pie(filtered_data(), values=\"Body Mass (g)\", names=\"Species\", title=\"Body mass from Species\")\n        return pie_chart\n        \n# Card view for visualization---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n       width=\"2px\",\n        length=\"2px\"\n    ),\n)\n\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Add a reactive calculation to filter the data\n@reactive.calc\ndef filtered_data():\n    return penguins_df_r[penguins_df_r[\"Species\"].isin(input.selected_species_list())]", "type": "text"}]